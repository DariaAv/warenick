package com.javarush.task.task27.task2712;

import com.javarush.task.task27.task2712.ad.AdvertisementManager;
import com.javarush.task.task27.task2712.ad.NoVideoAvailableException;
import com.javarush.task.task27.task2712.kitchen.Cook;
import com.javarush.task.task27.task2712.kitchen.Order;
import com.javarush.task.task27.task2712.kitchen.TestOrder;
import com.javarush.task.task27.task2712.statistic.StatisticManager;
import com.javarush.task.task27.task2712.statistic.event.NoAvailableVideoEventDataRow;

import java.io.IOException;
import java.util.Observable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

//это наш  планшет
public class Tablet  {
    //номер планшета инициализируется в конструкторе
    private final int number;
    //возникновения исключений
    private static Logger logger = Logger.getLogger(Tablet.class.getName());
    private LinkedBlockingQueue<Order> queue;

    public Tablet (int number) {
        this.number = number;
    }

    public void setQueue(LinkedBlockingQueue<Order> queue) {
        this.queue = queue;
    }

    @Override
    public String toString() {
        return "Tablet{number=" + number + "}";
    }

    //создает заказ, которые выберет пользователь
    public void createOrder() {
        Order order = null;
        try {
            order = new Order( this );
            if (!order.isEmpty()) {
                ConsoleHelper.writeMessage(order.toString());
                queue.add( order );
                new AdvertisementManager(order.getTotalCookingTime() * 60).processVideos();
            }
            }
            catch(NoVideoAvailableException e) {
                logger.log(Level.INFO,"No video is available for the order " + order);
            }
            catch (IOException e) {
            logger.log(Level.SEVERE,"Console is unavailable.");
            }
    }
    /*
    В классе Tablet создай метод void createTestOrder() с похожей функциональностью,
который будет случайным образом генерировать заказ со случайными блюдами не общаясь с реальным человеком.
Все необходимые данные передай в конструкторе.
     */
    public void createTestOrder() {
        TestOrder testOrder = null;
            try {
                testOrder = new TestOrder( this );
                if (!testOrder.isEmpty()) {
                    ConsoleHelper.writeMessage(testOrder.toString());
                    try {
                        queue.put(testOrder);
                    } catch (InterruptedException e) {
                    }
                    new AdvertisementManager(testOrder.getTotalCookingTime() * 60).processVideos();
                }
            } catch (NoVideoAvailableException e) {
                logger.log(Level.INFO,"No video is available for the order " + testOrder);
            }
            catch (IOException e) {
                logger.log( Level.SEVERE, "Console is unavailable." );
            }

    }


}
