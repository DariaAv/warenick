package com.javarush.task.task27.task2712.kitchen;

import com.javarush.task.task27.task2712.ConsoleHelper;
import com.javarush.task.task27.task2712.Tablet;
import com.javarush.task.task27.task2712.statistic.StatisticManager;
import com.javarush.task.task27.task2712.statistic.event.CookedOrderEventDataRow;

import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.LinkedBlockingQueue;

public class Cook extends Observable implements Runnable {
    private String name; //имя повара
    private boolean busy; //занятость повара
    private LinkedBlockingQueue<Order> queue;
    private boolean stopped = false;
    private boolean cathced = false;

    public void setQueue(LinkedBlockingQueue<Order> queue) {
        this.queue = queue;
    }

    public Cook (String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return name;
    }

//повар начинает готовить (приготовление занимает 10-кратный размер от времени приготовления заказа)
    public void startCookingOrder(Order order) {
        busy = true;
        ConsoleHelper.writeMessage("Start cooking - " + order + ", cooking time " + order.getTotalCookingTime() + "min");
        StatisticManager.getInstance().register( new CookedOrderEventDataRow( order.getTablet().toString(), name, order.getTotalCookingTime() * 60, order.getDishes() ) );
        try {
            Thread.sleep( order.getTotalCookingTime() * 10 );
        }
        catch (InterruptedException e) {ConsoleHelper.writeMessage(e.getMessage());}
        setChanged();
        notifyObservers(order);
        busy = false;
    }

    public boolean isBusy() {
        return busy;
    }

    @Override
    public void run() {
        while (!stopped) {
            try {
                Thread.sleep( 10 );
            }
            catch (InterruptedException e) {}
            if (queue.peek()!=null) {
                if (!this.isBusy()) {
                    try {
                        Order order = queue.take();
                        if (order != null) {
                            startCookingOrder( order );
                        }
                    }
                    catch (InterruptedException e) {
                        cathced= true;
                    }
                }
                if (cathced&&queue.isEmpty()) stopped=true;
            }
        }

    }
}
